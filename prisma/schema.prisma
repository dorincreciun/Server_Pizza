// Prisma schema for Pizza Shop API
// Provider is env-driven. Defaults to SQLite via .env example

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DoughType {
  subtire
  traditional
}

enum Size {
  mica
  medie
  mare
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  emailVerifiedAt DateTime?
  passwordHash    String
  name            String
  phone           String?   @unique
  role            String    @default("user")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  carts           Cart[]
  orders          Order[]
  purchaseStats   PurchaseStat[]
  emailTokens     EmailVerificationToken[]
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  products  Product[]
}

model Ingredient {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  slug       String   @unique
  priceDelta Float    @default(0)
  createdAt  DateTime @default(now())
  products   Product[] @relation("ProductIngredients")
}

model Product {
  id               Int        @id @default(autoincrement())
  name             String
  slug             String     @unique
  description      String
  basePrice        Float
  isConfigurable   Boolean
  popularityScore  Int        @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  available        Boolean    @default(true)
  imageUrl         String?
  category         Category   @relation(fields: [categoryId], references: [id])
  categoryId       Int
  ingredients      Ingredient[] @relation("ProductIngredients")
  variants         ProductVariant[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  purchaseStats    PurchaseStat[]

  @@index([categoryId])
  @@index([createdAt])
  @@index([popularityScore])
  @@index([basePrice])
}

model ProductVariant {
  id         Int       @id @default(autoincrement())
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  size       Size
  dough      DoughType
  priceDelta Float     @default(0)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@unique([productId, size, dough])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id                  Int       @id @default(autoincrement())
  cart                Cart      @relation(fields: [cartId], references: [id])
  cartId              Int
  product             Product   @relation(fields: [productId], references: [id])
  productId           Int
  variant             ProductVariant? @relation(fields: [variantId], references: [id])
  variantId           Int?
  quantity            Int
  customIngredientIds Json // stores number[]; replaced Int[] to be MySQL-compatible
  itemPrice           Float // unit price at time of adding
  createdAt           DateTime @default(now())
}

model Order {
  id             Int        @id @default(autoincrement())
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  status         String
  subtotal       Float
  taxes          Float
  deliveryFee    Float
  total          Float
  deliveryAddress String
  deliveryComment String?
  deliveryEta     DateTime
  createdAt      DateTime   @default(now())
  items          OrderItem[]
}

model OrderItem {
  id             Int       @id @default(autoincrement())
  order          Order     @relation(fields: [orderId], references: [id])
  orderId        Int
  product        Product   @relation(fields: [productId], references: [id])
  productId      Int
  variant        ProductVariant? @relation(fields: [variantId], references: [id])
  variantId      Int?
  quantity       Int
  snapshotName   String
  snapshotConfig Json
  unitPrice      Float
  lineTotal      Float
}

model PurchaseStat {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  count     Int      @default(0)

  @@unique([productId, userId])
}
